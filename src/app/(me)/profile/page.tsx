import { MotionCard, CardHeader, CardContent } from "@/components/ui/MotionCard";
import { StatCard } from "@/components/ui/StatCard";
import { Button } from "@/components/ui/Button";
import { Badge } from "@/components/ui/Badge";
import { getCurrentUser } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { redirect } from "next/navigation";
import Link from "next/link";

export default async function ProfilePage() {
  const user = await getCurrentUser();
  if (!user) redirect("/login");

  // Load user-related data (works with real Prisma and the in-memory mock)
  const now = new Date();
  const [mySpots, bookingsAsRenter, bookingsAsOwner] = await Promise.all([
    prisma.parkingSpot.findMany({ where: { ownerId: user.id } }),
    // bookings made by the user
    (prisma as any).booking.findMany({ where: { renterId: user.id }, include: { spot: true } }),
    // bookings for user's spots (to calculate earnings)
    (prisma as any).booking.findMany({ where: { spot: { ownerId: user.id } }, include: { spot: true } }),
  ]);

  const activeBookingsCount = bookingsAsRenter.filter(
    (b: any) => b.endAt > now && (b.status === "APPROVED" || b.status === "PAID")
  ).length;

  const earnings = bookingsAsOwner
    .filter((b: any) => b.status === "PAID" || b.status === "APPROVED")
    .reduce((sum: number, b: any) => sum + (b.ownerAmount ?? 0), 0);

  const formatRub = (amount: number) => `${(amount / 100).toLocaleString("ru-RU")} ‚ÇΩ`;

  return (
    <div className="min-h-screen py-12">
      <div className="container">
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold text-[var(--text-primary)] mb-4">
            –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
          </h1>
          <p className="text-[var(--text-secondary)] text-lg">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
          </p>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid md:grid-cols-4 gap-6 mb-12">
          <StatCard
            title="–ú–æ–∏ –º–µ—Å—Ç–∞"
            value={String(mySpots.length)}
            icon="üÖøÔ∏è"
            trend={{ value: 0, isPositive: true }}
          />
          <StatCard
            title="–ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
            value={String(activeBookingsCount)}
            icon="üìÖ"
            trend={{ value: 0, isPositive: true }}
          />
          <StatCard
            title="–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ"
            value={formatRub(earnings)}
            icon="üí∞"
            trend={{ value: 0, isPositive: true }}
          />
          <StatCard
            title="–†–µ–π—Ç–∏–Ω–≥"
            value="‚Äî"
            icon="‚≠ê"
            trend={{ value: 0, isPositive: true }}
          />
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
          <MotionCard>
            <CardHeader 
              title="–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" 
              subtitle="–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"
              icon="üë§"
            />
            <CardContent>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-1">
                    –ò–º—è
                  </label>
                  <p className="text-[var(--text-secondary)]">{user.name || "‚Äî"}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-1">
                    Email
                  </label>
                  <p className="text-[var(--text-secondary)]">{user.email}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-1">
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </label>
                  <p className="text-[var(--text-secondary)]">{user.phone || "‚Äî"}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-1">
                    –°—Ç–∞—Ç—É—Å
                  </label>
                  <Badge variant="success">–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</Badge>
                </div>
              </div>
            </CardContent>
            <div className="mt-6 pt-6 border-t border-[var(--border-primary)]">
              <Link href="/profile/edit" className="block">
                <Button variant="outline" size="sm" className="w-full" icon="‚úèÔ∏è">
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                </Button>
              </Link>
            </div>
          </MotionCard>

          {/* –ú–æ–∏ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–µ –º–µ—Å—Ç–∞ */}
          <MotionCard>
            <CardHeader 
              title="–ú–æ–∏ –º–µ—Å—Ç–∞" 
              subtitle="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏"
              icon="üÖøÔ∏è"
            />
            <CardContent>
              <div className="space-y-4">
                {mySpots.length === 0 && (
                  <p className="text-[var(--text-secondary)]">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç.</p>
                )}
                {mySpots.slice(0, 3).map((s: any) => (
                  <div key={s.id} className="p-4 rounded-xl bg-[var(--bg-tertiary)]">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-semibold text-[var(--text-primary)]">
                        {s.title}
                      </h4>
                      <Badge variant={s.status === "APPROVED" ? "success" : s.status === "PENDING_REVIEW" ? "warning" : "default"} size="sm">
                        {s.status === "APPROVED" ? "–ê–∫—Ç–∏–≤–Ω–æ" : s.status === "PENDING_REVIEW" ? "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" : "–ß–µ—Ä–Ω–æ–≤–∏–∫"}
                      </Badge>
                    </div>
                    <p className="text-sm text-[var(--text-secondary)] mb-2">
                      {s.address}
                    </p>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-[var(--text-muted)]">
                        {(s.pricePerHour / 100).toLocaleString("ru-RU")} ‚ÇΩ/—á–∞—Å
                      </span>
                      <Link href={`/spots/${s.id}`}>
                        <Button variant="ghost" size="sm" icon="üëÅÔ∏è">
                          –ü—Ä–æ—Å–º–æ—Ç—Ä
                        </Button>
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
            <div className="mt-6 pt-6 border-t border-[var(--border-primary)]">
              <Link href="/spots/create" className="block">
                <Button variant="primary" size="sm" className="w-full" icon="‚ûï">
                  –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ
                </Button>
              </Link>
            </div>
          </MotionCard>

          {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <MotionCard>
            <CardHeader 
              title="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" 
              subtitle="–ò—Å—Ç–æ—Ä–∏—è –∞—Ä–µ–Ω–¥—ã"
              icon="üìÖ"
            />
            <CardContent>
              <div className="space-y-4">
                {bookingsAsRenter.length === 0 && (
                  <p className="text-[var(--text-secondary)]">–ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.</p>
                )}
                {bookingsAsRenter.slice(0, 3).map((b: any) => (
                  <div key={b.id} className="p-4 rounded-xl bg-[var(--bg-tertiary)]">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-semibold text-[var(--text-primary)]">
                        {b.spot?.title || "–ü–∞—Ä–∫–æ–≤–∫–∞"}
                      </h4>
                      <Badge variant={b.status === "PAID" ? "success" : b.status === "APPROVED" ? "info" : b.status === "PENDING" ? "warning" : "default"} size="sm">
                        {b.status}
                      </Badge>
                    </div>
                    <p className="text-sm text-[var(--text-secondary)] mb-2">
                      {new Date(b.startAt).toLocaleString("ru-RU")} ‚Äî {new Date(b.endAt).toLocaleString("ru-RU")}
                    </p>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-[var(--text-muted)]">
                        {formatRub(b.totalPrice)}
                      </span>
                      <Button variant="ghost" size="sm" icon="üëÅÔ∏è">
                        –î–µ—Ç–∞–ª–∏
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
            <div className="mt-6 pt-6 border-t border-[var(--border-primary)]">
              <Button variant="outline" size="sm" className="w-full" icon="üìã">
                –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
              </Button>
            </div>
          </MotionCard>
        </div>
      </div>
    </div>
  );
}


