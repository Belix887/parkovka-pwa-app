"use client";
import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

export default function MobileForgotPasswordPage() {
  const [email, setEmail] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);
  const [step, setStep] = useState<"email" | "code" | "password">("email");
  const [code, setCode] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const router = useRouter();

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
      setTimeout(() => {
        setLoading(false);
        setSuccess(true);
        setStep("code");
      }, 2000);
    } catch (error) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞");
      setLoading(false);
    }
  };

  const handleCodeSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
      setTimeout(() => {
        if (code === "123456") {
          setStep("password");
          setError("");
        } else {
          setError("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
        }
        setLoading(false);
      }, 1000);
    } catch (error) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞");
      setLoading(false);
    }
  };

  const handlePasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    if (newPassword !== confirmPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      setLoading(false);
      return;
    }

    if (newPassword.length < 6) {
      setError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
      setLoading(false);
      return;
    }

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
      setTimeout(() => {
        setLoading(false);
        setSuccess(true);
        setTimeout(() => {
          router.push("/mobile-app/login?passwordChanged=true");
        }, 2000);
      }, 2000);
    } catch (error) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è");
      setLoading(false);
    }
  };

  const resendCode = () => {
    setError("");
    setSuccess(false);
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    setTimeout(() => {
      setSuccess(true);
    }, 1000);
  };

  return (
    <div className="mobile-auth-page">
      <div className="auth-container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="auth-header">
          <div className="auth-logo">
            <div className="logo-icon">üöó</div>
            <h1 className="logo-text">–ü–∞—Ä–∫–æ–≤–∫–∞</h1>
          </div>
          
          {step === "email" && (
            <>
              <h2 className="auth-title">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
              <p className="auth-subtitle">–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p>
            </>
          )}
          
          {step === "code" && (
            <>
              <h2 className="auth-title">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
              <p className="auth-subtitle">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ {email}</p>
            </>
          )}
          
          {step === "password" && (
            <>
              <h2 className="auth-title">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</h2>
              <p className="auth-subtitle">–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
            </>
          )}
        </div>

        {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ email */}
        {step === "email" && (
          <form className="auth-form" onSubmit={handleEmailSubmit}>
            {error && (
              <div className="error-message">
                <span className="error-icon">‚ö†Ô∏è</span>
                {error}
              </div>
            )}

            <div className="form-group">
              <label className="form-label">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="form-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
                required
              />
            </div>

            <button
              type="submit"
              className={`auth-button primary ${loading ? "loading" : ""}`}
              disabled={loading}
            >
              {loading ? (
                <>
                  <div className="loading-spinner"></div>
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"
              )}
            </button>
          </form>
        )}

        {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ */}
        {step === "code" && (
          <form className="auth-form" onSubmit={handleCodeSubmit}>
            {error && (
              <div className="error-message">
                <span className="error-icon">‚ö†Ô∏è</span>
                {error}
              </div>
            )}

            {success && (
              <div className="success-message">
                <span className="success-icon">‚úÖ</span>
                –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email
              </div>
            )}

            <div className="form-group">
              <label className="form-label">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</label>
              <input
                type="text"
                value={code}
                onChange={(e) => setCode(e.target.value)}
                className="form-input code-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"
                maxLength={6}
                required
              />
              <p className="form-hint">–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: 123456</p>
            </div>

            <button
              type="submit"
              className={`auth-button primary ${loading ? "loading" : ""}`}
              disabled={loading}
            >
              {loading ? (
                <>
                  <div className="loading-spinner"></div>
                  –ü—Ä–æ–≤–µ—Ä–∫–∞...
                </>
              ) : (
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥"
              )}
            </button>

            <div className="resend-section">
              <p className="resend-text">–ù–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥?</p>
              <button
                type="button"
                className="resend-button"
                onClick={resendCode}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
              </button>
            </div>
          </form>
        )}

        {/* –§–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è */}
        {step === "password" && (
          <form className="auth-form" onSubmit={handlePasswordSubmit}>
            {error && (
              <div className="error-message">
                <span className="error-icon">‚ö†Ô∏è</span>
                {error}
              </div>
            )}

            <div className="form-group">
              <label className="form-label">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                className="form-input"
                placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
                required
                minLength={6}
              />
            </div>

            <div className="form-group">
              <label className="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                className="form-input"
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                required
              />
            </div>

            <button
              type="submit"
              className={`auth-button primary ${loading ? "loading" : ""}`}
              disabled={loading}
            >
              {loading ? (
                <>
                  <div className="loading-spinner"></div>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"
              )}
            </button>
          </form>
        )}

        {/* –£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ */}
        {success && step === "password" && (
          <div className="success-container">
            <div className="success-icon-large">‚úÖ</div>
            <h3 className="success-title">–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</h3>
            <p className="success-text">–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º</p>
          </div>
        )}

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="auth-navigation">
          {step === "code" && (
            <button
              className="back-step-button"
              onClick={() => setStep("email")}
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ email
            </button>
          )}
          
          {step === "password" && (
            <button
              className="back-step-button"
              onClick={() => setStep("code")}
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–æ–¥—É
            </button>
          )}
        </div>

        {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ */}
        <div className="auth-footer">
          <p className="footer-text">
            –í—Å–ø–æ–º–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å?{" "}
            <Link href="/mobile-app/login" className="footer-link">
              –í–æ–π—Ç–∏
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}
