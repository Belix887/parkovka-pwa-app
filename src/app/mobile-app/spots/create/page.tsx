"use client";
import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

interface SpotForm {
  title: string;
  description: string;
  address: string;
  pricePerHour: string;
  photos: File[];
  features: {
    covered: boolean;
    guarded: boolean;
    camera: boolean;
    evCharging: boolean;
    disabledAccessible: boolean;
    wideEntrance: boolean;
  };
  rules: string[];
  coordinates: {
    lat: string;
    lng: string;
  };
}

export default function MobileCreateSpotPage() {
  const [formData, setFormData] = useState<SpotForm>({
    title: "",
    description: "",
    address: "",
    pricePerHour: "",
    photos: [],
    features: {
      covered: false,
      guarded: false,
      camera: false,
      evCharging: false,
      disabledAccessible: false,
      wideEntrance: false,
    },
    rules: [""],
    coordinates: {
      lat: "",
      lng: "",
    },
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [currentStep, setCurrentStep] = useState(1);
  const router = useRouter();

  const totalSteps = 4;

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleFeatureChange = (feature: keyof SpotForm["features"]) => {
    setFormData({
      ...formData,
      features: {
        ...formData.features,
        [feature]: !formData.features[feature],
      },
    });
  };

  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      setFormData({
        ...formData,
        photos: [...formData.photos, ...files],
      });
    }
  };

  const removePhoto = (index: number) => {
    setFormData({
      ...formData,
      photos: formData.photos.filter((_, i) => i !== index),
    });
  };

  const handleRuleChange = (index: number, value: string) => {
    const newRules = [...formData.rules];
    newRules[index] = value;
    setFormData({
      ...formData,
      rules: newRules,
    });
  };

  const addRule = () => {
    setFormData({
      ...formData,
      rules: [...formData.rules, ""],
    });
  };

  const removeRule = (index: number) => {
    if (formData.rules.length > 1) {
      setFormData({
        ...formData,
        rules: formData.rules.filter((_, i) => i !== index),
      });
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.title || !formData.description || !formData.address || !formData.pricePerHour) {
        setError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
        setLoading(false);
        return;
      }

      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞
      setTimeout(() => {
        setLoading(false);
        router.push("/mobile-app/profile?spotCreated=true");
      }, 2000);
    } catch (error) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞");
      setLoading(false);
    }
  };

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const getStepTitle = (step: number) => {
    const titles = {
      1: "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
      2: "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ—Ç–æ",
      3: "–ü—Ä–∞–≤–∏–ª–∞ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
      4: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è",
    };
    return titles[step as keyof typeof titles];
  };

  return (
    <div className="mobile-create-spot-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="create-header">
        <div className="header-top">
          <Link href="/mobile-app/profile" className="back-button">
            <span className="back-icon">‚Üê</span>
          </Link>
          <h1 className="page-title">–°–¥–∞—Ç—å –º–µ—Å—Ç–æ</h1>
          <div className="header-spacer"></div>
        </div>
        
        <div className="progress-bar">
          <div className="progress-fill" style={{ width: `${(currentStep / totalSteps) * 100}%` }}></div>
        </div>
        
        <div className="step-info">
          <span className="step-number">–®–∞–≥ {currentStep} –∏–∑ {totalSteps}</span>
          <span className="step-title">{getStepTitle(currentStep)}</span>
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ */}
      <form className="create-form" onSubmit={handleSubmit}>
        {error && (
          <div className="error-message">
            <span className="error-icon">‚ö†Ô∏è</span>
            {error}
          </div>
        )}

        {/* –®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {currentStep === 1 && (
          <div className="form-step">
            <div className="form-group">
              <label className="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ *</label>
              <input
                type="text"
                name="title"
                value={formData.title}
                onChange={handleInputChange}
                className="form-input"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–∞—Ä–∫–æ–≤–∫–∞ —É –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏"
                required
              />
            </div>

            <div className="form-group">
              <label className="form-label">–û–ø–∏—Å–∞–Ω–∏–µ *</label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                className="form-textarea"
                placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞..."
                rows={4}
                required
              />
            </div>

            <div className="form-group">
              <label className="form-label">–ê–¥—Ä–µ—Å *</label>
              <input
                type="text"
                name="address"
                value={formData.address}
                onChange={handleInputChange}
                className="form-input"
                placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, –≥–æ—Ä–æ–¥"
                required
              />
            </div>

            <div className="form-group">
              <label className="form-label">–¶–µ–Ω–∞ –∑–∞ —á–∞—Å (‚ÇΩ) *</label>
              <input
                type="number"
                name="pricePerHour"
                value={formData.pricePerHour}
                onChange={handleInputChange}
                className="form-input"
                placeholder="200"
                min="50"
                max="1000"
                required
              />
            </div>
          </div>
        )}

        {/* –®–∞–≥ 2: –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ—Ç–æ */}
        {currentStep === 2 && (
          <div className="form-step">
            <div className="form-group">
              <label className="form-label">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</label>
              <div className="features-grid">
                <label className="feature-checkbox">
                  <input
                    type="checkbox"
                    checked={formData.features.covered}
                    onChange={() => handleFeatureChange("covered")}
                  />
                  <span className="checkbox-text">üè† –ö—Ä—ã—Ç–∞—è</span>
                </label>
                <label className="feature-checkbox">
                  <input
                    type="checkbox"
                    checked={formData.features.guarded}
                    onChange={() => handleFeatureChange("guarded")}
                  />
                  <span className="checkbox-text">üõ°Ô∏è –û—Ö—Ä–∞–Ω—è–µ–º–∞—è</span>
                </label>
                <label className="feature-checkbox">
                  <input
                    type="checkbox"
                    checked={formData.features.camera}
                    onChange={() => handleFeatureChange("camera")}
                  />
                  <span className="checkbox-text">üìπ –ö–∞–º–µ—Ä—ã</span>
                </label>
                <label className="feature-checkbox">
                  <input
                    type="checkbox"
                    checked={formData.features.evCharging}
                    onChange={() => handleFeatureChange("evCharging")}
                  />
                  <span className="checkbox-text">üîå –ó–∞—Ä—è–¥–∫–∞ –≠–í</span>
                </label>
                <label className="feature-checkbox">
                  <input
                    type="checkbox"
                    checked={formData.features.disabledAccessible}
                    onChange={() => handleFeatureChange("disabledAccessible")}
                  />
                  <span className="checkbox-text">‚ôø –î–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤</span>
                </label>
                <label className="feature-checkbox">
                  <input
                    type="checkbox"
                    checked={formData.features.wideEntrance}
                    onChange={() => handleFeatureChange("wideEntrance")}
                  />
                  <span className="checkbox-text">üöõ –®–∏—Ä–æ–∫–∏–π –≤—ä–µ–∑–¥</span>
                </label>
              </div>
            </div>

            <div className="form-group">
              <label className="form-label">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</label>
              <div className="photo-upload">
                <input
                  type="file"
                  id="photo-upload"
                  accept="image/*"
                  multiple
                  onChange={handlePhotoChange}
                  className="photo-input"
                />
                <label htmlFor="photo-upload" className="photo-upload-button">
                  <span className="upload-icon">üì∑</span>
                  –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                </label>
              </div>
              
              {formData.photos.length > 0 && (
                <div className="photo-preview">
                  {formData.photos.map((photo, index) => (
                    <div key={index} className="photo-item">
                      <img src={URL.createObjectURL(photo)} alt={`–§–æ—Ç–æ ${index + 1}`} />
                      <button
                        type="button"
                        className="remove-photo"
                        onClick={() => removePhoto(index)}
                      >
                        ‚úï
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {/* –®–∞–≥ 3: –ü—Ä–∞–≤–∏–ª–∞ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
        {currentStep === 3 && (
          <div className="form-step">
            <div className="form-group">
              <label className="form-label">–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</label>
              {formData.rules.map((rule, index) => (
                <div key={index} className="rule-input-group">
                  <input
                    type="text"
                    value={rule}
                    onChange={(e) => handleRuleChange(index, e.target.value)}
                    className="form-input"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–∞—Ä–∫–æ–≤–∫–∏"
                  />
                  {formData.rules.length > 1 && (
                    <button
                      type="button"
                      className="remove-rule"
                      onClick={() => removeRule(index)}
                    >
                      ‚úï
                    </button>
                  )}
                </div>
              ))}
              <button
                type="button"
                className="add-rule-button"
                onClick={addRule}
              >
                + –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ
              </button>
            </div>

            <div className="form-group">
              <label className="form-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
              <div className="coordinates-row">
                <input
                  type="number"
                  name="lat"
                  value={formData.coordinates.lat}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="–®–∏—Ä–æ—Ç–∞"
                  step="any"
                />
                <input
                  type="number"
                  name="lng"
                  value={formData.coordinates.lng}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="–î–æ–ª–≥–æ—Ç–∞"
                  step="any"
                />
              </div>
              <p className="form-hint">
                –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–º–æ–≥—É—Ç —Ç–æ—á–Ω–µ–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ
              </p>
            </div>
          </div>
        )}

        {/* –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è */}
        {currentStep === 4 && (
          <div className="form-step">
            <div className="preview-section">
              <h3 className="preview-title">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
              
              <div className="spot-preview">
                <div className="preview-header">
                  <h4 className="preview-name">{formData.title || "–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞"}</h4>
                  <div className="preview-price">
                    {formData.pricePerHour ? `${formData.pricePerHour} ‚ÇΩ/—á–∞—Å` : "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
                  </div>
                </div>
                
                <div className="preview-address">
                  <span className="address-icon">üìç</span>
                  {formData.address || "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"}
                </div>
                
                <div className="preview-description">
                  {formData.description || "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
                </div>
                
                <div className="preview-features">
                  {Object.entries(formData.features)
                    .filter(([_, value]) => value)
                    .map(([key, _]) => (
                      <span key={key} className="feature-tag">
                        {key === "covered" && "üè† –ö—Ä—ã—Ç–∞—è"}
                        {key === "guarded" && "üõ°Ô∏è –û—Ö—Ä–∞–Ω—è–µ–º–∞—è"}
                        {key === "camera" && "üìπ –ö–∞–º–µ—Ä—ã"}
                        {key === "evCharging" && "üîå –ó–∞—Ä—è–¥–∫–∞ –≠–í"}
                        {key === "disabledAccessible" && "‚ôø –î–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤"}
                        {key === "wideEntrance" && "üöõ –®–∏—Ä–æ–∫–∏–π –≤—ä–µ–∑–¥"}
                      </span>
                    ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º */}
        <div className="form-navigation">
          {currentStep > 1 && (
            <button
              type="button"
              className="nav-button secondary"
              onClick={prevStep}
            >
              –ù–∞–∑–∞–¥
            </button>
          )}
          
          {currentStep < totalSteps ? (
            <button
              type="button"
              className="nav-button primary"
              onClick={nextStep}
            >
              –î–∞–ª–µ–µ
            </button>
          ) : (
            <button
              type="submit"
              className={`nav-button primary ${loading ? "loading" : ""}`}
              disabled={loading}
            >
              {loading ? (
                <>
                  <div className="loading-spinner"></div>
                  –ü—É–±–ª–∏–∫–∞—Ü–∏—è...
                </>
              ) : (
                "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ"
              )}
            </button>
          )}
        </div>
      </form>
    </div>
  );
}
