"use client";
import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

interface ParkingSpot {
  id: string;
  title: string;
  description: string;
  address: string;
  pricePerHour: number;
  photos: string[];
  features: string[];
  owner: {
    name: string;
    rating: number;
    avatar?: string;
  };
  coordinates: {
    lat: number;
    lng: number;
  };
  availability: {
    isAvailable: boolean;
    nextAvailable?: string;
  };
  rules: string[];
}

interface BookingForm {
  startDate: string;
  startTime: string;
  endDate: string;
  endTime: string;
  vehicleType: string;
  specialRequests: string;
}

export default function MobileSpotDetailsPage({ params }: { params: Promise<{ id: string }> }) {
  const [spot, setSpot] = useState<ParkingSpot | null>(null);
  const [loading, setLoading] = useState(true);
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [bookingForm, setBookingForm] = useState<BookingForm>({
    startDate: "",
    startTime: "",
    endDate: "",
    endTime: "",
    vehicleType: "car",
    specialRequests: "",
  });
  const [bookingLoading, setBookingLoading] = useState(false);
  const [error, setError] = useState("");
  const router = useRouter();

  useEffect(() => {
    const loadData = async () => {
      const { id } = await params;
      await loadSpotDetails(id);
    };
    loadData();
  }, [params]);

  const loadSpotDetails = async (spotId: string) => {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞
      setTimeout(() => {
        setSpot({
          id: spotId,
          title: "–ü–∞—Ä–∫–æ–≤–∫–∞ —É –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏",
          description: "–£–¥–æ–±–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –≤ —Å–∞–º–æ–º —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã, —Ä—è–¥–æ–º —Å –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥—å—é –∏ –ì–£–ú–æ–º. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏ –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á. –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –æ—Ö—Ä–∞–Ω–∞ –∏ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.",
          address: "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1, –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
          pricePerHour: 20000, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
          photos: [
            "/api/placeholder/400/300",
            "/api/placeholder/400/300",
            "/api/placeholder/400/300",
          ],
          features: ["–ö—Ä—ã—Ç–∞—è", "–û—Ö—Ä–∞–Ω—è–µ–º–∞—è", "–ö–∞–º–µ—Ä—ã", "–î–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤"],
          owner: {
            name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            rating: 4.9,
            avatar: "",
          },
          coordinates: {
            lat: 55.7539,
            lng: 37.6208,
          },
          availability: {
            isAvailable: true,
          },
          rules: [
            "–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–∞—Ä–∫–æ–≤–∫–∏",
            "–ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –≤–µ—â–∏ –≤ –º–∞—à–∏–Ω–µ",
            "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∑–≤–æ–Ω–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É",
          ],
        });
        setLoading(false);
      }, 1000);
    } catch (error) {
      console.error("Error loading spot details:", error);
      setLoading(false);
    }
  };

  const handleBookingSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setBookingLoading(true);
    setError("");

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      setTimeout(() => {
        setBookingLoading(false);
        setShowBookingForm(false);
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        alert("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!");
      }, 2000);
    } catch (error) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
      setBookingLoading(false);
    }
  };

  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setBookingForm({
      ...bookingForm,
      [e.target.name]: e.target.value,
    });
  };

  const formatPrice = (priceInKopecks: number) => {
    return `${(priceInKopecks / 100).toLocaleString("ru-RU")} ‚ÇΩ/—á–∞—Å`;
  };

  const calculateTotalPrice = () => {
    if (!bookingForm.startDate || !bookingForm.endDate || !bookingForm.startTime || !bookingForm.endTime) {
      return 0;
    }

    const startDateTime = new Date(`${bookingForm.startDate}T${bookingForm.startTime}`);
    const endDateTime = new Date(`${bookingForm.endDate}T${bookingForm.endTime}`);
    const hours = Math.ceil((endDateTime.getTime() - startDateTime.getTime()) / (1000 * 60 * 60));
    
    return hours * (spot?.pricePerHour || 0) / 100;
  };

  if (loading) {
    return (
      <div className="mobile-spot-details-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π...</p>
        </div>
      </div>
    );
  }

  if (!spot) {
    return (
      <div className="mobile-spot-details-page">
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h3>–ü–∞—Ä–∫–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h3>
          <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞</p>
          <Link href="/mobile-app/catalog" className="back-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="mobile-spot-details-page">
      {/* –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
      <div className="spot-gallery">
        <div className="main-photo">
          <img src={spot.photos[0]} alt={spot.title} />
          <div className="photo-overlay">
            <button className="photo-counter">
              üì∑ {spot.photos.length} —Ñ–æ—Ç–æ
            </button>
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="spot-info">
        <div className="spot-header">
          <h1 className="spot-title">{spot.title}</h1>
          <div className="spot-price">{formatPrice(spot.pricePerHour)}</div>
        </div>

        <div className="spot-location">
          <span className="location-icon">üìç</span>
          <span className="location-text">{spot.address}</span>
        </div>

        <div className="spot-description">
          <p>{spot.description}</p>
        </div>

        {/* –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ */}
        <div className="spot-features">
          <h3 className="features-title">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</h3>
          <div className="features-grid">
            {spot.features.map((feature, index) => (
              <div key={index} className="feature-item">
                <span className="feature-icon">
                  {feature === "–ö—Ä—ã—Ç–∞—è" && "üè†"}
                  {feature === "–û—Ö—Ä–∞–Ω—è–µ–º–∞—è" && "üõ°Ô∏è"}
                  {feature === "–ö–∞–º–µ—Ä—ã" && "üìπ"}
                  {feature === "–î–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤" && "‚ôø"}
                  {feature === "–ó–∞—Ä—è–¥–∫–∞ –≠–í" && "üîå"}
                  {feature === "–®–∏—Ä–æ–∫–∏–π –≤—ä–µ–∑–¥" && "üöõ"}
                </span>
                <span className="feature-text">{feature}</span>
              </div>
            ))}
          </div>
        </div>

        {/* –í–ª–∞–¥–µ–ª–µ—Ü */}
        <div className="spot-owner">
          <h3 className="owner-title">–í–ª–∞–¥–µ–ª–µ—Ü</h3>
          <div className="owner-info">
            <div className="owner-avatar">
              {spot.owner.avatar ? (
                <img src={spot.owner.avatar} alt={spot.owner.name} />
              ) : (
                <div className="avatar-placeholder">
                  {spot.owner.name[0].toUpperCase()}
                </div>
              )}
            </div>
            <div className="owner-details">
              <div className="owner-name">{spot.owner.name}</div>
              <div className="owner-rating">
                <span className="rating-stars">‚≠ê</span>
                <span className="rating-value">{spot.owner.rating}</span>
              </div>
            </div>
            <button className="contact-owner-btn">
              <span className="contact-icon">üí¨</span>
            </button>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∏–ª–∞ */}
        <div className="spot-rules">
          <h3 className="rules-title">–ü—Ä–∞–≤–∏–ª–∞</h3>
          <ul className="rules-list">
            {spot.rules.map((rule, index) => (
              <li key={index} className="rule-item">
                <span className="rule-icon">üìã</span>
                {rule}
              </li>
            ))}
          </ul>
        </div>

        {/* –ö–∞—Ä—Ç–∞ */}
        <div className="spot-map">
          <h3 className="map-title">–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h3>
          <div className="map-container">
            <div className="map-placeholder">
              <span className="map-icon">üó∫Ô∏è</span>
              <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞</p>
              <button className="open-map-btn">
                –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <div className="booking-footer">
        {spot.availability.isAvailable ? (
          <button
            className="book-button primary"
            onClick={() => setShowBookingForm(true)}
          >
            <span className="book-icon">üöó</span>
            –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ
          </button>
        ) : (
          <div className="unavailable-message">
            <span className="unavailable-icon">‚è∞</span>
            –ú–µ—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            {spot.availability.nextAvailable && (
              <p>–°–ª–µ–¥—É—é—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {spot.availability.nextAvailable}</p>
            )}
          </div>
        )}
      </div>

      {/* –§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showBookingForm && (
        <div className="booking-modal">
          <div className="modal-overlay" onClick={() => setShowBookingForm(false)}></div>
          <div className="modal-content">
            <div className="modal-header">
              <h3 className="modal-title">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞</h3>
              <button
                className="modal-close"
                onClick={() => setShowBookingForm(false)}
              >
                ‚úï
              </button>
            </div>

            <form className="booking-form" onSubmit={handleBookingSubmit}>
              {error && (
                <div className="error-message">
                  <span className="error-icon">‚ö†Ô∏è</span>
                  {error}
                </div>
              )}

              <div className="form-row">
                <div className="form-group">
                  <label className="form-label">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
                  <input
                    type="date"
                    name="startDate"
                    value={bookingForm.startDate}
                    onChange={handleFormChange}
                    className="form-input"
                    required
                  />
                </div>
                <div className="form-group">
                  <label className="form-label">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>
                  <input
                    type="time"
                    name="startTime"
                    value={bookingForm.startTime}
                    onChange={handleFormChange}
                    className="form-input"
                    required
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label className="form-label">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
                  <input
                    type="date"
                    name="endDate"
                    value={bookingForm.endDate}
                    onChange={handleFormChange}
                    className="form-input"
                    required
                  />
                </div>
                <div className="form-group">
                  <label className="form-label">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
                  <input
                    type="time"
                    name="endTime"
                    value={bookingForm.endTime}
                    onChange={handleFormChange}
                    className="form-input"
                    required
                  />
                </div>
              </div>

              <div className="form-group">
                <label className="form-label">–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</label>
                <select
                  name="vehicleType"
                  value={bookingForm.vehicleType}
                  onChange={handleFormChange}
                  className="form-select"
                >
                  <option value="car">–õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å</option>
                  <option value="suv">–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫</option>
                  <option value="truck">–ì—Ä—É–∑–æ–≤–∏–∫</option>
                  <option value="motorcycle">–ú–æ—Ç–æ—Ü–∏–∫–ª</option>
                </select>
              </div>

              <div className="form-group">
                <label className="form-label">–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</label>
                <textarea
                  name="specialRequests"
                  value={bookingForm.specialRequests}
                  onChange={handleFormChange}
                  className="form-textarea"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
                  rows={3}
                />
              </div>

              <div className="booking-summary">
                <div className="summary-row">
                  <span className="summary-label">–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å:</span>
                  <span className="summary-value">{formatPrice(spot.pricePerHour)}</span>
                </div>
                <div className="summary-row">
                  <span className="summary-label">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                  <span className="summary-value total">
                    {calculateTotalPrice().toLocaleString("ru-RU")} ‚ÇΩ
                  </span>
                </div>
              </div>

              <div className="form-actions">
                <button
                  type="button"
                  className="form-button secondary"
                  onClick={() => setShowBookingForm(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  type="submit"
                  className={`form-button primary ${bookingLoading ? "loading" : ""}`}
                  disabled={bookingLoading}
                >
                  {bookingLoading ? (
                    <>
                      <div className="loading-spinner"></div>
                      –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...
                    </>
                  ) : (
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}
