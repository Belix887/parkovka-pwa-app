"use client";
import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

interface FavoriteSpot {
  id: string;
  title: string;
  address: string;
  pricePerHour: number;
  image: string;
  features: string[];
  rating: number;
  distance: number;
  isAvailable: boolean;
  addedAt: string;
}

export default function MobileFavoritesPage() {
  const [favorites, setFavorites] = useState<FavoriteSpot[]>([]);
  const [loading, setLoading] = useState(true);
  const [sortBy, setSortBy] = useState<"added" | "price" | "distance" | "rating">("added");
  const [filterBy, setFilterBy] = useState<"all" | "available" | "unavailable">("all");
  const router = useRouter();

  useEffect(() => {
    loadFavorites();
  }, []);

  const loadFavorites = async () => {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      setTimeout(() => {
        const mockFavorites: FavoriteSpot[] = [
          {
            id: "1",
            title: "–ü–∞—Ä–∫–æ–≤–∫–∞ —É –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏",
            address: "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1, –ú–æ—Å–∫–≤–∞",
            pricePerHour: 200,
            image: "/api/placeholder/400/300",
            features: ["–ö—Ä—ã—Ç–∞—è", "–û—Ö—Ä–∞–Ω—è–µ–º–∞—è", "–ö–∞–º–µ—Ä—ã"],
            rating: 4.8,
            distance: 0.5,
            isAvailable: true,
            addedAt: "2024-01-15T10:00:00",
          },
          {
            id: "2",
            title: "–ö—Ä—ã—Ç–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –≤ –¢–¶",
            address: "–¢–≤–µ—Ä—Å–∫–∞—è, 15, –ú–æ—Å–∫–≤–∞",
            pricePerHour: 150,
            image: "/api/placeholder/400/300",
            features: ["–ö—Ä—ã—Ç–∞—è", "–û—Ö—Ä–∞–Ω—è–µ–º–∞—è", "–î–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤"],
            rating: 4.6,
            distance: 1.2,
            isAvailable: false,
            addedAt: "2024-01-14T15:30:00",
          },
          {
            id: "3",
            title: "–ü–∞—Ä–∫–æ–≤–∫–∞ —É –ø–∞—Ä–∫–∞",
            address: "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ, –ú–æ—Å–∫–≤–∞",
            pricePerHour: 100,
            image: "/api/placeholder/400/300",
            features: ["–û—Ö—Ä–∞–Ω—è–µ–º–∞—è", "–ö–∞–º–µ—Ä—ã"],
            rating: 4.9,
            distance: 2.1,
            isAvailable: true,
            addedAt: "2024-01-13T12:00:00",
          },
          {
            id: "4",
            title: "–ü–∞—Ä–∫–æ–≤–∫–∞ —É –í–î–ù–•",
            address: "–ü—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞, 119, –ú–æ—Å–∫–≤–∞",
            pricePerHour: 80,
            image: "/api/placeholder/400/300",
            features: ["–ö—Ä—ã—Ç–∞—è", "–û—Ö—Ä–∞–Ω—è–µ–º–∞—è", "–ó–∞—Ä—è–¥–∫–∞ –≠–í"],
            rating: 4.7,
            distance: 3.5,
            isAvailable: true,
            addedAt: "2024-01-12T09:00:00",
          },
        ];

        setFavorites(mockFavorites);
        setLoading(false);
      }, 1000);
    } catch (error) {
      console.error("Error loading favorites:", error);
      setLoading(false);
    }
  };

  const removeFromFavorites = async (spotId: string) => {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      setTimeout(() => {
        setFavorites(prev => prev.filter(spot => spot.id !== spotId));
      }, 500);
    } catch (error) {
      console.error("Error removing from favorites:", error);
    }
  };

  const formatPrice = (price: number) => {
    return `${price.toLocaleString("ru-RU")} ‚ÇΩ/—á–∞—Å`;
  };

  const formatDistance = (distance: number) => {
    if (distance < 1) {
      return `${Math.round(distance * 1000)} –º`;
    }
    return `${distance.toFixed(1)} –∫–º`;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("ru-RU", {
      day: "numeric",
      month: "short",
    });
  };

  const sortedAndFilteredFavorites = favorites
    .filter(spot => {
      if (filterBy === "all") return true;
      if (filterBy === "available") return spot.isAvailable;
      if (filterBy === "unavailable") return !spot.isAvailable;
      return true;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case "added":
          return new Date(b.addedAt).getTime() - new Date(a.addedAt).getTime();
        case "price":
          return a.pricePerHour - b.pricePerHour;
        case "distance":
          return a.distance - b.distance;
        case "rating":
          return b.rating - a.rating;
        default:
          return 0;
      }
    });

  if (loading) {
    return (
      <div className="mobile-favorites-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="mobile-favorites-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="favorites-header">
        <div className="header-top">
          <Link href="/mobile-app/profile" className="back-button">
            <span className="back-icon">‚Üê</span>
          </Link>
          <h1 className="page-title">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</h1>
          <div className="header-spacer"></div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="favorites-stats">
        <div className="stat-item">
          <div className="stat-icon">‚ù§Ô∏è</div>
          <div className="stat-value">{favorites.length}</div>
          <div className="stat-label">–í—Å–µ–≥–æ</div>
        </div>
        <div className="stat-item">
          <div className="stat-icon">‚úÖ</div>
          <div className="stat-value">{favorites.filter(s => s.isAvailable).length}</div>
          <div className="stat-label">–î–æ—Å—Ç—É–ø–Ω–æ</div>
        </div>
        <div className="stat-item">
          <div className="stat-icon">‚≠ê</div>
          <div className="stat-value">
            {favorites.length > 0 
              ? (favorites.reduce((sum, s) => sum + s.rating, 0) / favorites.length).toFixed(1)
              : "0"
            }
          </div>
          <div className="stat-label">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
        </div>
        <div className="stat-item">
          <div className="stat-icon">üí∞</div>
          <div className="stat-value">
            {favorites.length > 0 
              ? Math.round(favorites.reduce((sum, s) => sum + s.pricePerHour, 0) / favorites.length)
              : "0"
            }‚ÇΩ
          </div>
          <div className="stat-label">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</div>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
      <div className="favorites-controls">
        <div className="filter-section">
          <h3 className="section-title">–§–∏–ª—å—Ç—Ä</h3>
          <div className="filter-buttons">
            <button
              className={`filter-button ${filterBy === "all" ? "active" : ""}`}
              onClick={() => setFilterBy("all")}
            >
              –í—Å–µ ({favorites.length})
            </button>
            <button
              className={`filter-button ${filterBy === "available" ? "active" : ""}`}
              onClick={() => setFilterBy("available")}
            >
              –î–æ—Å—Ç—É–ø–Ω–æ ({favorites.filter(s => s.isAvailable).length})
            </button>
            <button
              className={`filter-button ${filterBy === "unavailable" ? "active" : ""}`}
              onClick={() => setFilterBy("unavailable")}
            >
              –ó–∞–Ω—è—Ç–æ ({favorites.filter(s => !s.isAvailable).length})
            </button>
          </div>
        </div>

        <div className="sort-section">
          <h3 className="section-title">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</h3>
          <div className="sort-buttons">
            <button
              className={`sort-button ${sortBy === "added" ? "active" : ""}`}
              onClick={() => setSortBy("added")}
            >
              –ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            </button>
            <button
              className={`sort-button ${sortBy === "price" ? "active" : ""}`}
              onClick={() => setSortBy("price")}
            >
              –ü–æ —Ü–µ–Ω–µ
            </button>
            <button
              className={`sort-button ${sortBy === "distance" ? "active" : ""}`}
              onClick={() => setSortBy("distance")}
            >
              –ü–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            </button>
            <button
              className={`sort-button ${sortBy === "rating" ? "active" : ""}`}
              onClick={() => setSortBy("rating")}
            >
              –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            </button>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
      <div className="favorites-content">
        {sortedAndFilteredFavorites.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">‚ù§Ô∏è</div>
            <h3>–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç</h3>
            <p>
              {filterBy === "all" 
                ? "–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞" 
                : `–ù–µ—Ç ${filterBy === "available" ? "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö" : "–∑–∞–Ω—è—Ç—ã—Ö"} –º–µ—Å—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º`
              }
            </p>
            <Link href="/mobile-app/catalog" className="cta-button">
              –ù–∞–π—Ç–∏ –ø–∞—Ä–∫–æ–≤–∫—É
            </Link>
          </div>
        ) : (
          <div className="favorites-list">
            {sortedAndFilteredFavorites.map((spot) => (
              <div key={spot.id} className="favorite-card">
                <div className="card-image">
                  <img src={spot.image} alt={spot.title} />
                  <div className={`availability-badge ${spot.isAvailable ? "available" : "unavailable"}`}>
                    {spot.isAvailable ? "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" : "‚ùå –ó–∞–Ω—è—Ç–æ"}
                  </div>
                  <button
                    className="remove-favorite-btn"
                    onClick={() => removeFromFavorites(spot.id)}
                  >
                    ‚ù§Ô∏è
                  </button>
                </div>
                
                <div className="card-content">
                  <div className="card-header">
                    <h3 className="card-title">{spot.title}</h3>
                    <div className="card-price">{formatPrice(spot.pricePerHour)}</div>
                  </div>
                  
                  <div className="card-address">
                    <span className="address-icon">üìç</span>
                    {spot.address}
                  </div>
                  
                  <div className="card-features">
                    {spot.features.map((feature, index) => (
                      <span key={index} className="feature-tag">
                        {feature === "–ö—Ä—ã—Ç–∞—è" && "üè†"}
                        {feature === "–û—Ö—Ä–∞–Ω—è–µ–º–∞—è" && "üõ°Ô∏è"}
                        {feature === "–ö–∞–º–µ—Ä—ã" && "üìπ"}
                        {feature === "–î–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤" && "‚ôø"}
                        {feature === "–ó–∞—Ä—è–¥–∫–∞ –≠–í" && "üîå"}
                        {feature === "–®–∏—Ä–æ–∫–∏–π –≤—ä–µ–∑–¥" && "üöõ"}
                        {feature}
                      </span>
                    ))}
                  </div>
                  
                  <div className="card-stats">
                    <div className="stat-item">
                      <span className="stat-icon">‚≠ê</span>
                      <span className="stat-text">{spot.rating}</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-icon">üìç</span>
                      <span className="stat-text">{formatDistance(spot.distance)}</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-icon">üìÖ</span>
                      <span className="stat-text">–î–æ–±–∞–≤–ª–µ–Ω–æ {formatDate(spot.addedAt)}</span>
                    </div>
                  </div>
                </div>
                
                <div className="card-actions">
                  <button 
                    className="action-button secondary"
                    onClick={() => router.push(`/mobile-app/spots/${spot.id}`)}
                  >
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                  </button>
                  {spot.isAvailable && (
                    <button 
                      className="action-button primary"
                      onClick={() => router.push(`/mobile-app/spots/${spot.id}`)}
                    >
                      –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
