"use client";

import { usePWA } from '@/lib/pwa';
import { useState } from 'react';

export function PWAInstallButton() {
  const { canInstall, isInstalled, installApp } = usePWA();
  const [isInstalling, setIsInstalling] = useState(false);

  if (isInstalled) {
    return (
      <div className="pwa-status">
        <div className="status-badge installed">
          <span className="status-icon">‚úì</span>
          <span className="status-text">–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>
        </div>
      </div>
    );
  }

  if (!canInstall) {
    return null;
  }

  const handleInstall = async () => {
    setIsInstalling(true);
    try {
      await installApp();
    } catch (error) {
      console.error('Installation failed:', error);
    } finally {
      setIsInstalling(false);
    }
  };

  return (
    <button
      onClick={handleInstall}
      disabled={isInstalling}
      className="pwa-install-btn"
    >
      {isInstalling ? (
        <>
          <span className="loading-spinner"></span>
          –£—Å—Ç–∞–Ω–æ–≤–∫–∞...
        </>
      ) : (
        <>
          <span className="install-icon">üì±</span>
          –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        </>
      )}
    </button>
  );
}

export function PWAUpdateNotification() {
  const { updateAvailable, updateApp } = usePWA();
  const [isUpdating, setIsUpdating] = useState(false);

  if (!updateAvailable) {
    return null;
  }

  const handleUpdate = async () => {
    setIsUpdating(true);
    try {
      await updateApp();
    } catch (error) {
      console.error('Update failed:', error);
      setIsUpdating(false);
    }
  };

  return (
    <div className="pwa-update-notification">
      <div className="update-content">
        <div className="update-icon">üîÑ</div>
        <div className="update-text">
          <div className="update-title">–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</div>
          <div className="update-subtitle">–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞</div>
        </div>
        <button
          onClick={handleUpdate}
          disabled={isUpdating}
          className="update-btn"
        >
          {isUpdating ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
        </button>
      </div>
    </div>
  );
}

export function PWAOfflineIndicator() {
  const { isOnline } = usePWA();

  if (isOnline) {
    return null;
  }

  return (
    <div className="pwa-offline-indicator">
      <div className="offline-content">
        <span className="offline-icon">üì∂</span>
        <span className="offline-text">–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</span>
      </div>
    </div>
  );
}

export function PWANotificationButton() {
  const { requestNotificationPermission, sendNotification } = usePWA();
  const [permissionGranted, setPermissionGranted] = useState(false);

  const handleRequestPermission = async () => {
    const granted = await requestNotificationPermission();
    setPermissionGranted(granted);
    
    if (granted) {
      sendNotification('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!', {
        body: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö',
        tag: 'permission-granted'
      });
    }
  };

  const handleTestNotification = () => {
    sendNotification('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', {
      body: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ü–∞—Ä–∫–æ–≤–∫–∞',
      tag: 'test-notification'
    });
  };

  return (
    <div className="pwa-notification-controls">
      {!permissionGranted ? (
        <button
          onClick={handleRequestPermission}
          className="notification-permission-btn"
        >
          <span className="notification-icon">üîî</span>
          –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </button>
      ) : (
        <button
          onClick={handleTestNotification}
          className="notification-test-btn"
        >
          <span className="notification-icon">üîî</span>
          –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </button>
      )}
    </div>
  );
}
